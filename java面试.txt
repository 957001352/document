1、在 java 中守护线程和本地线程区别？
    通过方法Thread.setDaemon(true)就是把线程设置成守护线程,Thread.setDaemon(false)设置成用户线程，设置线程必须在Thread.start()之前;
	两者的区别是判断虚拟机(JVM)何时离开,守护进程是为其他线程提供服务的,如果全部的用户线程已经撤离,守护线程没有可服务的线程,JVM撤离。
	
2、线程与进程的区别？
	进程是调度运行的基本单位,执行中的一段程序就是一个进程;
	线程是进程中执行运算的最小单位,单个进程执行中每个任务就是一个线程;
	
	一个线程只能属于一个进程,一个进程可以拥有多个线程;
	
	线程的代价或开销比较小;
	
	线程没有地址空间,线程包含在进程的地址空间中;

3、什么是多线程中的上下文切换？
	多线程会共同使用一组计算机上的CPU,而线程数大于个程序分配的CPU数量时,为了让各个线程都有执行的机会,就需要轮转使用CPU。不同的线程切换使用CPU发生的切换数据等就是上下文切换。
	
4、死锁与活锁的区别，死锁与饥饿的区别？
	死锁是指两个或两个以上的线程在执行过程中,因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去;
	活锁是指任务或者执行者没有被阻塞,由于某些条件没有满足,导致一直重复尝试、失败、尝试、失败;
	
	死锁和活锁的区别在于,处于活锁的实体是在不断的改变状态的,而处于死锁的实体表现为等待,活锁有可能自行解开,死锁则不能;
	
	饥饿是一个或者多个线程因为种种原因无法获得所需要的资源,导致一直无法执行的状态;
	
	饥饿状态是因为持续的有其他优先级更高的进程请求相同的资源，饥饿不像死锁或者活锁,饥饿能够被解开。
	
5、Java 中用到的线程调度算法是什么？
		
	在任意时刻只能执行一条机器指令,每个线程只有获得CPU的使用权才能执行指令,所谓的多线程的并发运行,其实是指从宏观上看,各个线程轮流获得CPU的使用权,分别执行各自的任务。在运行池中,会有多个处于就绪状态的线程在等待CPU,JAVA虚拟机的一项任务就是负责线程的调度,线程调度是指按照特定机制为多个线程分配CPU的使用权。
	有两种调度模型：分时调度模型和抢占式调度模型
	分时调度模型是指让所有的线程轮流获得CPU的使用权,并且平均分配每个线程占用的CPU的时间片
	java虚拟机采用抢占式调度模型,是指优先让可运行池中优先级高的线程占用CPU,如果可运行池中的线程优先级相同,那么就随机选择一个线程,使其占用CPU。处于运行状态的线程会一直运行,直至它不得不放弃CPU。
	
6、什么是线程组，为什么在 Java 中不推荐使用？

	ThreadGroup类不是线程安全的
	
7、为什么使用 Executor 框架？
	
	每次执行任务创建线程new Thread()比较消耗性能,创建一个线程是比较耗时、耗资源的;
	调用new Thread()创建的线程缺乏管理,而且可以无限制的创建,线程之间的相互竞争会导致过多占用系统资源而导致瘫痪,还有线程之间的频繁交替也会消耗很多系统资源;
	使用new Thread()启动的线程不利于扩展。

8、在 Java 中 Executor 和 Executors 的区别？

	Executors工具类的不同方法按照我们的需求创建了不同的线程池,来满足业务的需求。
	Executor接口对象能执行我们的线程任务。
	ExecutorService接口继承了Executor接口并进行了扩展,提供了更多的方法我们能获得任务执行的状态并且可以获取任务的返回值。
	使用ThreadPoolExeutor可以创建自定义线程池。
	Future表示异步计算的结果,它提供了检查计算是否完成的方法,以等待计算的完成,并可以使用get()方法获取计算的结果。
	
9、如何在 Windows 和 Linux 上查找哪个线程使用的 CPU 时间最长？
	jstask
	ps -ef | grep java 查看pid
	top -H -p pid 查看占用cpu时间长的线程

10、什么是原子操作？在 Java Concurrency API 中有哪些原子类(atomic classes)？
	
	不可被中断的一个或一系列操作,java可以通过锁和循环CAS的方式来实现原子操作。
	AtomicBoolean,AtomicInteger,AtomicLong,AtomicReference

12、什么是 Executors 框架？
	
	Executor框架是一个根据一组执行策略调用,调度,执行和控制的异步任务的框架。
	无限制的创建线程会引起应用程序内存溢出。所以创建一个线程池是个更好的解决方案,因为可以限制线程的数量并且可以回收再利用这些线程。利用Executors框架可以非常方便的创建一个线程池。
	
13、什么是阻塞队列？阻塞队列的实现原理是什么？如何使用阻塞队列来实现生产者-消费者模型？
	
	阻塞队列是一个在队列基础上又支持了两个附加操作的队列。
	2个附加操作：
	支持阻塞的插入方法：队列满时,队列会阻塞插入元素的线程,直到队列不满。
	支持阻塞的移除方法：队列空时,获取元素的线程会等待队列变为非空。
	
	BlockingQueue
	
14、什么是 Callable 和 Future?
	Callable接口类似于Runnble,Runnable不会返回结果,并且无法抛出返回结果的异常,Callable的功能更强大一些,被线程执行后,可以返回值,这个返回值可以被Future拿到,Future可以拿到异步执行任务的返回值、可以认为是带有回调的Runnable。
	Future接口表示异步任务,是还没有完成的任务给出的未来结果,所以说Callable用于产生结果,Future用于获取结果。
	
15、什么是 FutureTask?使用 ExecutorService 启动任务。
	
	在java并发程序中FutureTask表示一个可以取消的异步运算,他有启动和取消运算、查询运算是否完成和取回运算结果等方法。只有当运算完成的时候结果才能取回,如果运算尚未完成get方法将会阻塞。一个FutureTask对象可以对调用了Callable和Runnable的对象进行包装,由于FutureTask也是调用了Runnable接口所以它可以提交给Executor来执行
	
16、什么是并发容器的实现？

	同步容器可以简单的理解为通过synchronized来实现同步的容器,如果有多个线程调用同步容器的方法,他们将会串行执行。比如Vetor,Hashtable等方法返回的容器,同步容器实现线程安全的方式就是将他们的状态封装起来,并在需要同步的方法上加上关键字synchronized。
	并发容器使用了与同步容器完全不同的加锁策略来提供更高的并发性和伸缩性,例如在ConcurrentHashMap中采用了一种粒度更细的加锁机制,可以称为分段锁,在这种锁的机制下,允许任意数量的读线程并发的访问map,并且执行读操作的线程和写操作的线程也可以并发的访问map,同时允许一定数量的写操作线程并发的修改map,所以它可以在并发的环境下实现更高的吞吐量。
	
17、多线程同步和互斥有几种实现方法，都是什么？

	线程同步是指线程之间所有具有的一种制约关系,一个线程的执行依赖另外一个线程的消息,当他没有得到另一个线程的消息时应等待,直到消息到达时才被唤醒。
	线程互斥是指对于共享的进程系统资源,每个线程访问时的排他性。当有若干个线程都要使用某一个共享资源时,任何时刻最多只允许一个线程去使用,其他线程必须等待,直到占用资源者释放该资源。线程互斥可以看成是一种特殊的线程同步。
	
	线程间的同步方法大体可以分为两类：
	用户模式：原子操作、临界区
	内核模式：事件、信号量、互斥量
	内核模式就是利用系统内核对象的单一性来进行同步,使用时需要切换内核态和用户态,而用户模式就是不需要切换内核态,只在用户态完成操作。
	
18、什么是竞争条件？你怎样发现和解决竞争？
	
	当多个进程都企图对共享数据进行某种处理,而最后的结果又取决于进程运行的顺序时,则我们认为这发生了竞争条件。
	
19、你将如何使用 thread dump？你将如何分析 Thread dump？
	
	新建状态(New)
	就绪状态(Runnable)
	运行状态(Running)
	阻塞状态(Blocked)
	
20、为什么我们调用start()方法时会执行run()方法，为什么我们不能直接调用 run()方法？
	因为Thread中的start方法中,调用了Thread中的run方法。
	如果我们直接调用子线程的run()方法,其方法还是运行在主线程中,代码在程序中是顺序执行的,所以不会解决耗时操作的问题,所以不能直接调用线程的run方法,只有子线程开始了,才会有异步的效果,当Thread.start()方法执行了以后,子线程才会执行run()方法,这样的效果和在主线程中直接调用run()方法的效果是截然不同的。
	
	run()方法:在本线程内调用该Runnable对象的run()方法,可以重复多次调用;
	start()方法:启动一个线程,调用该Runnable对象的run()方法,不能多次启动一个线程。
================================================================================================================================================	
二、JVM面试题

1、JVM三大性能调优参数，JVM 几个重要的参数;

	-Xms:是对初始堆大小的调整。
	-Xmx:是对最大堆大小的调整。
	-Xss:是对每个线程stack大小的调整,直接影响对方法的调用次数。
	
2、JVM调优

	使用较小的内存占用来获得较高的吞吐量或者较低的延迟。
	内存占用：程序正常运行需要的内存大小。
	延迟：由于垃圾收集而引起的程序停顿时间。
	吞吐量：用户程序运行时间占用户程序和垃圾收集占用总时间的比值。
	
3、JVM内存管理，JVM的常见的垃圾收集器，Ｇ１垃圾收集器。GC调优，Minor GC ，Full GC 触发条件



4、java内存模型
	
	
5、Java垃圾回收机制(GC)
	如果说这个对象没有被其他对象所引用该对象就是无用的,此对象就被称为垃圾,其占用的内存也就要被销毁。
	
	java中标记垃圾的算法主要有两种,引用计数算法和可达性分析算法。
	java中存在着四种垃圾回收算法：标记清除算法、复制算法、标记整理算法以及分代回收算法。
	
6、jvm怎样 判断一个对象是否可回收，怎样的对象才能作为GC root


7、OOM说一下？怎么排查？哪些会导致OOM? OOM出现在什么时候
	
	OOM是指程序需要的内存空间大于系统分配的内存空间,OOM后果就是程序crash,可以通俗理解：程序申请内存过大,虚拟机无法满足,然后自杀了。
	
	先通过内存映像工具对Dump出来的堆转储快照进行分析,重点是确认内存中的对象是否是必要的,也就是要先分清楚到底是出现了内存泄露还是内存溢出。
	
	内存泄露、内存溢出
	
8、什么是Full GC？GC? major GC? stop the world 9、描述JVM中一次full gc过程。
	
	
10、JVM中类加载机制，类加载过程，什么是双亲委派模型？，类加载器有哪些	
	
	类的加载机制是指把编译后的.class类文件的二进制数据读取到内存中,并为之创建一个java.lang.Class对象,用来封装类在元数据空间的数据结构
	加载->验证->准备->解析->初始化->使用->卸载
	类加载器收到类加载请求时,不会自己先去尝试加载这个类,而是把请求委托给父加载器去执行,
	依次向上委托,父加载器处理失败再交给子加载器
	
	启动类加载器:加载jre/lib下的jar文件
	扩展类加载器：加载jre/lib/ext目录下的jar包
	系统类加载器：classpath的内容

11、如何判断是否有内存泄露？定位 Full GC 发生的原因，有哪些方式？

	泄露可以对比不同时间点内存分配，一般看用户类型的分配情况，什么在增加。具体，比如用jmap -histo:live 多次快照，然后对比差异，或者用jmc之类profiling工具，都可以进行，对比会更加流畅一些
	定位 Full GC 发生的原因，有哪些方式？
	1,首先通过printgcdetail 查看fullgc频率以及时长
	2,通过dump 查看内存中哪些对象多，这些可能是引起fullgc的原因，看是否能优化
	3,如果堆大或者是生产环境，可以开起jmc 飞行一段时间，查看这期间的相关数据来订位问题

12、Java 中都有哪些引用类型？
	
	强引用:发生GC的时候不会被回收。 new
	软引用:有用但不是必须的对象,在发生内存溢出之前会被回收。softReference
	弱引用:有用但不是必须的对象,在下一次GC时会被回收。WeakReference
	虚引用:无法通过虚引用获得对象,用PlantomReference实现虚引用,虚引用的用途是在GC时返回一个通知。
	







三、Spring Cloud 面试题

1、什么是Spring Cloud？
	SpringCloud是一个微服务框架,它提供的全套的分布式系统解决方案,对微服务基础框架Netflix的多个开源组件进行了封装,同时又实现了和云端平台以及和SpringBoot开发框架的集成,为微服务架构开发涉及的配置管理,服务治理,熔断机制、智能路由,微代理,控制总线,一次性token,全局一致性锁,leader选举,分布式session,集群状态管理等操作提供了一种简单的开发方式为开发者提供了快速构建分布式系统的工具

2、使用Spring Cloud有什么优势？
	大大降低了微服务项目部署的复杂性,提高了项目性能,解决了分布式系统中的冗余问题,负载均衡、服务发现、与分布式系统相关的复杂性。
	
3、服务注册和发现是什么意思？Spring Cloud如何实现？
	
	当我们开始一个项目的时候,我们通常需要对属性文件中进行所有的配置(yml文件配置)。随着越来越多的服务开发和部署,添加和修改这些属性变得更加复杂。有些服务可能会有所下降,而某些位置可能会发生变化。手动更改属性会产生问题。
	服务注册中心 服务注册和服务发现可以在这种情况下提供帮助,由于所有服务都在服务注册中心服务器上注册并通过调用服务注册中心服务器完成查找,因此无需处理服务地点的任何更改和处理。

4、负载平衡的意义什么？

	在计算机中,负载平衡可以改善跨计算机,计算机集群,网络链接,中央处理单元或磁盘驱动器等多种计算资源的工作负载分布。负载平衡旨在优化资源使用,最大化吞吐量,最小化响应时间并避免任何单一资源的过载。使用多个组件进行负载平衡而不是单个组件可能会用过冗余来提高可靠性和可用性。负载平衡通常涉及专用软件或硬件,例如多层交换机或域名系统服务器进程。

5、什么是Hystrix？它如何实现容错？

	Hystrix是对雪崩效应的一种微服务链路的保护机制
	
	雪崩效应：多个微服务之间调用的时候,有一个微服务出现问题,或者长时间未响应,对调用服务的占用越来越多的系统资源,造成雪崩。
	
	Hystrix的功能：服务降级、服务熔断、服务限流、实时监控。
	
	Hystrix是一个延迟和容错库,用于隔离访问远程系统、服务或者第三方库,防止级联失败,从而提升系统的可用性与容错性。
	
	包裹请求、跳闸机制、资源隔离、监控、回退机制、自我修复

6、什么是Hystrix断路器？我们需要它吗？

	在一个分布式系统里,许多依赖不可避免的会调用失败,比如超时、异常等。如果没有采用任何措施的话会导致雪崩效应。
	如何能够保证在一个依赖出问题的情况下,不会导致整体服务失败,这个就是Hystrix需要做的事情。Hystrix提供了熔断、隔离、Fallback、cache、监控等功能,能够在一个或多个依赖同时出现问题时保证系统依然可用。

7、什么是Netflix Feign？它的优点是什么？

	Feign使编写java http客户端更容易
	Feign是一个Java到HTTP客户端绑定器	基于注解驱动,支持JAXRS-2.0、springmvc注解系列、自带注解@RequestLine等等。
	支持http客户端扩展
	
	优点:可以与多种HTTP客户端集成、spring已经完全集成feign、极大的简化了了HTTP请求代码量、与ribbon负载均衡器、hystrix熔断器无缝集成。

8、什么是Spring Cloud Bus？我们需要它吗？

(文末附面试答案)

四、Spring Boot 面试题

1、什么是 Spring Boot？

	springboot就是spring开源框架下的子项目,是spring的一站式解决方案,主要简化了spring的使用难度、降低了对配置的要求,使得开发人员能够更容易的上手

2、Spring Boot 有哪些优点？

	简化了spring配置文件
	没有代码和XML文件的生成
	内置Tomcat
	能够独立运行
	简化监控

3、什么是 JavaConfig？
	JavaConfig是spring社区的产品,它提供了配置SpringIOC容器的纯Java方法。因此它有助于避免使用XML配置。使用JavaConfig的优点在于：
	面向对象的配置
	减少或者消除XML配置
	类型安全和重构友好

4、如何重新加载 Spring Boot 上的更改，而无需重新启动服务器？

	使用DevTools

5、Spring Boot 中的监视器是什么？
	SpringbootActuator是Spring启动框架中的重要功能之一,Springboot监视器可帮助你访问生产环境中正在运行的应用程序的当前状态。有几个指标必须在生产环境中进行检查和监控。即使一些外部应用程序可能正在使用这些服务来向有关人员处罚警报消息。监视器模块公开了一组可直接作为HTTPURL访问的REST端点来检查状态

6、如何在 Spring Boot 中禁用 Actuator 端点安全性？

	management.security.enabled = false

7、如何在自定义端口上运行 Spring Boot 应用程序？

	在application.properties文件中加入server.port=8080

8、什么是 YAML？

	是一种数据描述语言,语法比XML简单很多

9、如何实现 Spring Boot 应用程序的安全性？

	spring-boot-starter-security、必须添加安全配置。配置类必须扩展WebSecurityConfigurerAdapter并覆盖其方法

10、如何集成 Spring Boot 和 ActiveMQ？

	spring-boot-starter-activemq 

11、如何使用 Spring Boot 实现分页和排序？

12、什么是 Swagger？你用 Spring Boot 实现了它吗？

13、什么是 Spring Profiles？

14、什么是 Spring Batch？

15、什么是 FreeMarker 模板？

16、如何使用 Spring Boot 实现异常处理？

	@ControllerAdvice + @ExceptionHandler

17、您使用了哪些 starter maven 依赖项？

18、什么是 CSRF 攻击？

19、什么是 WebSockets？

	Websocket是一种计算机通信协议,通过单个TCP连接提供全双工通信信道
	Websocket是双向的,使用Websocket客户端或服务器可以发起消息发送
	Websocket是全双工的,客户端和服务器是相互独立的	单个TCP连接,初始连接使用的HTTP,然后将此链接升级到基于套接字的连接。然后这个单一连接用于所有未来的通信
	Light,与http相比,Websocket的消息数据交换要轻的多

20、什么是 AOP？
	AOP是Spring提供的关键特性之一,AOP即面向切面编程,是OOP编程的有效补充。在运行时,动态的将代码切入到类的指定方法、指定位置上的编程思想就是面向切面的编程

21、什么是 Apache Kafka？
	ApacheKafka是一个分布式数据流处理平台,可以实时发布、订阅、存储和处理数据流。

22、我们如何监视所有 Spring Boot 微服务？

	Springboot提供了监视器,
	在 Spring Boot Actuator 之上，它提供了一个 Web UI，使我们能够可视化多个应用程序的度量。

(文末附面试答案)
五、Dubbo 面试题

1、Dubbo是什么？

2、为什么要用Dubbo？

3、Dubbo 和 Spring Cloud 有什么区别？

4、dubbo都支持什么协议，推荐用哪种？

5、Dubbo需要 Web 容器吗？

6、Dubbo内置了哪几种服务容器？

7、Dubbo里面有哪几种节点角色？

8、画一画服务注册与发现的流程图

9、Dubbo默认使用什么注册中心，还有别的选择吗？

10、Dubbo有哪几种配置方式？

11、Dubbo 核心的配置有哪些？

12、在 Provider 上可以配置的 Consumer 端的属性有哪些？

13、Dubbo启动时如果依赖的服务不可用会怎样？

14、Dubbo推荐使用什么序列化框架，你知道的还有哪些？

15、Dubbo默认使用的是什么通信框架，还有别的选择吗？

16、Dubbo有哪几种集群容错方案，默认是哪种？

17、Dubbo有哪几种负载均衡策略，默认是哪种？

18、注册了多个同一样的服务，如果测试指定的某一个服务呢？

19、Dubbo支持服务多协议吗？

20、当一个服务接口有多种实现时怎么做？

(文末附面试答案)


六、Redis 面试题

1、什么是 Redis?
	Redis是一个开源的、使用C语言编写的、支持网络交互的、可基于内存也可持久化的Key-Value数据库

2、Redis 的数据类型？

	String、List、Hash、Set、有序集合

3、使用 Redis 有哪些好处？
	响应快速
	支持6种数据类型
	操作都是原子的
	MultiUtility工具

4、Redis 相比 Memcached 有哪些优势？

	Redis在存储小数据时比Memcached性能更高

5、Memcache 与 Redis 的区别都有哪些？

6、Redis 是单进程单线程的？
	Redis是单线程的模式,他是利用队列技术将并发访问改为串行访问,消除传统的传统数据库的串行操作开销

7、一个字符串类型的值能存储最大容量是多少？

8、Redis 的持久化机制是什么？各自的优缺点？

9、Redis 常见性能问题和解决方案：

10、redis 过期键的删除策略？

11、Redis 的回收策略（淘汰策略）?

12、为什么 edis 需要把所有数据放到内存中？

13、Redis 的同步机制了解么？

14、Pipeline 有什么好处，为什么要用 pipeline？

15、是否使用过 Redis 集群，集群的原理是什么？

16、Redis 集群方案什么情况下会导致整个集群不可用？

17、Redis 支持的 Java 客户端都有哪些？官方推荐用哪个？

18、Jedis 与 Redisson 对比有什么优缺点？

19、Redis 如何设置密码及验证密码？

20、说说 Redis 哈希槽的概念？





















	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
